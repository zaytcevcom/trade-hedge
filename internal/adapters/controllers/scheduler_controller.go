package controllers

import (
	"context"
	"time"
	"trade-hedge/internal/pkg/logger"
	"trade-hedge/internal/usecases"
)

// SchedulerController –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
type SchedulerController struct {
	hedgeUseCase         *usecases.HedgeStrategyUseCase
	statusCheckerUseCase *usecases.StatusCheckerUseCase
	interval             time.Duration
}

// NewSchedulerController —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π scheduler –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
func NewSchedulerController(hedgeUseCase *usecases.HedgeStrategyUseCase, statusCheckerUseCase *usecases.StatusCheckerUseCase, interval time.Duration) *SchedulerController {
	return &SchedulerController{
		hedgeUseCase:         hedgeUseCase,
		statusCheckerUseCase: statusCheckerUseCase,
		interval:             interval,
	}
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
func (s *SchedulerController) Start(ctx context.Context) {
	logger.LogWithTime("üïí –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–∂–¥—ã–µ %v", s.interval)

	ticker := time.NewTicker(s.interval)
	defer ticker.Stop()

	// –í—ã–ø–æ–ª–Ω—è–µ–º —Å—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
	s.executeStrategy(ctx)

	for {
		select {
		case <-ctx.Done():
			logger.LogWithTime("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
			return
		case <-ticker.C:
			s.executeStrategy(ctx)
		}
	}
}

// executeStrategy –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–Ω—É –∏—Ç–µ—Ä–∞—Ü–∏—é —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
func (s *SchedulerController) executeStrategy(ctx context.Context) {
	// –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ –ª–æ–≥–æ–≤
	logger.LogPlain("\n")
	logger.LogWithTime("‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∑–∏—Ü–∏–π...")

	// 1. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
	if err := s.statusCheckerUseCase.CheckAllActiveOrders(ctx); err != nil {
		logger.LogWithTime("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –æ—Ä–¥–µ—Ä–æ–≤: %v", err)
	}

	// 2. –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Å–¥–µ–ª–∫–∏ –¥–ª—è —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è
	hedgeController := NewHedgeController(s.hedgeUseCase)
	hedgeController.ExecuteHedgeStrategy(ctx)
}
