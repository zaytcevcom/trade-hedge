package usecases

import (
	"context"
	"fmt"
	"time"

	"trade-hedge/internal/domain/entities"
	"trade-hedge/internal/domain/repositories"
	"trade-hedge/internal/domain/services"
	"trade-hedge/internal/pkg/logger"
)

// StatusCheckerUseCase –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–æ–≤ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
type StatusCheckerUseCase struct {
	hedgeRepo       repositories.HedgeRepository
	exchangeService services.ExchangeService
}

// NewStatusCheckerUseCase —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π use case –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤
func NewStatusCheckerUseCase(
	hedgeRepo repositories.HedgeRepository,
	exchangeService services.ExchangeService,
) *StatusCheckerUseCase {
	return &StatusCheckerUseCase{
		hedgeRepo:       hedgeRepo,
		exchangeService: exchangeService,
	}
}

// CheckAllActiveOrders –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å—ã –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
func (s *StatusCheckerUseCase) CheckAllActiveOrders(ctx context.Context) error {
	logger.LogWithTime("üîç –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–æ–≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤...")

	// 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏
	pendingStatus := "PENDING"
	activeTrades, err := s.hedgeRepo.GetHedgedTrades(ctx, &pendingStatus)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: %w", err)
	}

	if len(activeTrades) == 0 {
		logger.LogWithTime("‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
		return nil
	}

	logger.LogWithTime("üìä –ù–∞–π–¥–µ–Ω–æ %d –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏", len(activeTrades))

	// 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
	updatedCount := 0
	for _, trade := range activeTrades {
		updated, err := s.checkSingleOrderStatus(ctx, trade)
		if err != nil {
			logger.LogWithTime("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ä–¥–µ—Ä–∞ %s (–ø–∞—Ä–∞ %s): %v",
				trade.BybitOrderID, trade.Pair, err)
			continue
		}

		if updated {
			updatedCount++
		}
	}

	logger.LogWithTime("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å—Ç–∞—Ç—É—Å–æ–≤: %d –∏–∑ %d", updatedCount, len(activeTrades))
	return nil
}

// checkSingleOrderStatus –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –æ–¥–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
func (s *StatusCheckerUseCase) checkSingleOrderStatus(ctx context.Context, trade *entities.HedgedTrade) (bool, error) {
	// –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å –±–∏—Ä–∂–∏
	statusInfo, err := s.exchangeService.GetOrderStatus(ctx, trade.BybitOrderID, trade.Pair)
	if err != nil {
		return false, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ—Ä–¥–µ—Ä–∞: %w", err)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Å—Ç–∞—Ç—É—Å
	if statusInfo.Status == trade.OrderStatus {
		// –°—Ç–∞—Ç—É—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
		err := s.hedgeRepo.UpdateHedgedTradeStatus(ctx, trade.BybitOrderID, trade.OrderStatus, trade.ClosePrice, trade.CloseTime)
		if err != nil {
			return false, fmt.Errorf("–æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏: %w", err)
		}
		return false, nil
	}

	// –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è
	logger.LogWithTime("üîÑ –û—Ä–¥–µ—Ä %s (–ø–∞—Ä–∞ %s): %s ‚Üí %s",
		trade.BybitOrderID, trade.Pair, trade.OrderStatus, statusInfo.Status)

	// –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
	var closePrice *float64
	var closeTime *time.Time

	// –ï—Å–ª–∏ –æ—Ä–¥–µ—Ä –∏—Å–ø–æ–ª–Ω–µ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–Ω—É –∏ –≤—Ä–µ–º—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
	if statusInfo.Status == entities.OrderStatusFilled {
		closePrice = statusInfo.FilledPrice
		closeTime = statusInfo.FilledTime

		// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏ –≤—ã–≤–æ–¥–∏–º –ø—Ä–∏–±—ã–ª—å
		if closePrice != nil {
			profit := (*closePrice - trade.HedgeOpenPrice) * trade.HedgeAmount
			logger.LogWithTime("üí∞ –•–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ü—Ä–∏–±—ã–ª—å: %.4f USDT", profit)
			logger.LogWithTime("   üìà –û—Ç–∫—Ä—ã—Ç–∏–µ: %.4f, –ó–∞–∫—Ä—ã—Ç–∏–µ: %.4f, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: %.4f",
				trade.HedgeOpenPrice, *closePrice, trade.HedgeAmount)
		}
	} else if statusInfo.Status.IsCompleted() {
		// –û—Ä–¥–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω –Ω–µ—É—Å–ø–µ—à–Ω–æ (–æ—Ç–º–µ–Ω–µ–Ω –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω)
		now := time.Now()
		closeTime = &now
		logger.LogWithTime("‚ùå –û—Ä–¥–µ—Ä %s –∑–∞–≤–µ—Ä—à–µ–Ω –Ω–µ—É—Å–ø–µ—à–Ω–æ: %s", trade.BybitOrderID, statusInfo.Status)
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	err = s.hedgeRepo.UpdateHedgedTradeStatus(ctx, trade.BybitOrderID, statusInfo.Status, closePrice, closeTime)
	if err != nil {
		return false, fmt.Errorf("–æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤ –ë–î: %w", err)
	}

	return true, nil
}
