package usecases

import (
	"context"
	"fmt"
	"time"
	"trade-hedge/internal/domain/entities"
	"trade-hedge/internal/domain/errors"
	"trade-hedge/internal/domain/repositories"
	"trade-hedge/internal/domain/services"
	"trade-hedge/internal/domain/valueobjects"
	"trade-hedge/internal/pkg/logger"
)

// HedgeStrategyConfig –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è
type HedgeStrategyConfig struct {
	PositionAmount float64 // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞ –ø–æ–∑–∏—Ü–∏–∏ –≤ –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç–µ
	MaxLossPercent float64
	ProfitRatio    float64
	BaseCurrency   string // –ë–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, USDT)
	RetryAttempts  int    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞
	RetryDelay     int    // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
}

// HedgeStrategyUseCase —Ä–µ–∞–ª–∏–∑—É–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è —É–±—ã—Ç–∫–æ–≤
type HedgeStrategyUseCase struct {
	tradeService    services.TradeService
	hedgeRepo       repositories.HedgeRepository
	exchangeService services.ExchangeService
	config          *HedgeStrategyConfig
}

// NewHedgeStrategyUseCase —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä use case
func NewHedgeStrategyUseCase(
	tradeService services.TradeService,
	hedgeRepo repositories.HedgeRepository,
	exchangeService services.ExchangeService,
	config *HedgeStrategyConfig,
) *HedgeStrategyUseCase {

	return &HedgeStrategyUseCase{
		tradeService:    tradeService,
		hedgeRepo:       hedgeRepo,
		exchangeService: exchangeService,
		config:          config,
	}
}

// ExecuteHedgeStrategy –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è
func (h *HedgeStrategyUseCase) ExecuteHedgeStrategy(ctx context.Context) error {
	// 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏
	trades, err := h.tradeService.GetActiveTrades(ctx)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: %w", err)
	}

	// 2. –§–∏–ª—å—Ç—Ä—É–µ–º —É–∂–µ —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏
	unhedgedTrades, err := h.filterUnhedgedTrades(ctx, trades)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: %w", err)
	}

	if len(unhedgedTrades) == 0 {
		return errors.NewNoTradesError()
	}

	// 3. –ù–∞—Ö–æ–¥–∏–º —Å–¥–µ–ª–∫—É –¥–ª—è —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è
	tradeToHedge := h.findTradeToHedge(unhedgedTrades)
	if tradeToHedge == nil {
		return errors.NewNoLossyTradesError(h.config.MaxLossPercent)
	}

	// 4. –í—ã–ø–æ–ª–Ω—è–µ–º —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏–µ
	return h.hedgeTrade(ctx, tradeToHedge)
}

// filterUnhedgedTrades —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç —Å–¥–µ–ª–∫–∏, –∏—Å–∫–ª—é—á–∞—è —É–∂–µ —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
func (h *HedgeStrategyUseCase) filterUnhedgedTrades(ctx context.Context, trades []*entities.Trade) ([]*entities.Trade, error) {
	var unhedged []*entities.Trade

	for _, trade := range trades {
		isHedged, err := h.hedgeRepo.IsTradeHedged(ctx, trade.ID)
		if err != nil {
			return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Å–¥–µ–ª–∫–∏ %d: %w", trade.ID, err)
		}

		if !isHedged {
			unhedged = append(unhedged, trade)
		}
	}

	return unhedged, nil
}

// findTradeToHedge –Ω–∞—Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—É—é –ø–æ–¥—Ö–æ–¥—è—â—É—é —Å–¥–µ–ª–∫—É –¥–ª—è —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è
func (h *HedgeStrategyUseCase) findTradeToHedge(trades []*entities.Trade) *entities.Trade {
	for _, trade := range trades {
		if trade.ShouldBeHedged(h.config.MaxLossPercent) {
			return trade
		}
	}
	return nil
}

// hedgeTrade –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–¥–µ–ª–∫–∏
func (h *HedgeStrategyUseCase) hedgeTrade(ctx context.Context, trade *entities.Trade) error {
	pair := valueobjects.NewTradingPair(trade.Pair)
	symbol := pair.ToBybitFormat()

	// 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç—ã
	balance, err := h.exchangeService.GetBalance(ctx, h.config.BaseCurrency)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ %s: %w", h.config.BaseCurrency, err)
	}

	// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é —Å—É–º–º—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Å –∑–∞–ø–∞—Å–æ–º –Ω–∞ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ
	requiredAmount := h.config.PositionAmount * 1.01 // +1% –∑–∞–ø–∞—Å –Ω–∞ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ

	if !balance.HasSufficientBalance(requiredAmount) {
		return errors.NewInsufficientBalanceError(requiredAmount, balance.Available, h.config.BaseCurrency)
	}

	// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–ª—é—Ç—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—É–º–º—É
	orderQuantity := entities.CalculateQuantityFromAmount(h.config.PositionAmount, trade.CurrentRate)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç –æ—Ä–¥–µ—Ä–∞ (Bybit —Ç—Ä–µ–±—É–µ—Ç –º–∏–Ω–∏–º—É–º 5 USDT –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –ø–∞—Ä)
	minOrderValue := 5.0 // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ä–¥–µ—Ä–∞ –≤ USDT
	orderValue := h.config.PositionAmount

	if orderValue < minOrderValue {
		logger.LogWithTime("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –°—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ä–¥–µ—Ä–∞ %.2f %s –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ %.2f %s",
			orderValue, h.config.BaseCurrency, minOrderValue, h.config.BaseCurrency)
		logger.LogWithTime("üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–≤–µ–ª–∏—á–∏—Ç—å position_amount –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–æ –º–∏–Ω–∏–º—É–º %.2f %s",
			minOrderValue, h.config.BaseCurrency)
	}

	logger.LogPlain("üí∞ –ë–∞–ª–∞–Ω—Å %s: –¥–æ—Å—Ç—É–ø–Ω–æ %.4f, —Ç—Ä–µ–±—É–µ—Ç—Å—è %.4f\n",
		h.config.BaseCurrency, balance.Available, requiredAmount)
	logger.LogPlain("üìä –ò—Å—Ö–æ–¥–Ω–∞—è —Å–¥–µ–ª–∫–∞ Freqtrade: %.6f %s –ø–æ —Ü–µ–Ω–µ %.4f (—É–±—ã—Ç–æ–∫ %.2f%%)\n",
		trade.Amount, pair.String(), trade.OpenRate, trade.ProfitRatio*100)
	logger.LogPlain("üõí –•–µ–¥–∂–∏—Ä—É—é—â–∞—è –ø–æ–∫—É–ø–∫–∞: %.6f %s –Ω–∞ —Å—É–º–º—É %.2f %s –ø–æ —Ü–µ–Ω–µ %.4f\n",
		orderQuantity, pair.ToBybitFormat(), h.config.PositionAmount, h.config.BaseCurrency, trade.CurrentRate)

	// 2. –†–∞–∑–º–µ—â–∞–µ–º —Ä—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É
	buyOrder := entities.NewMarketOrder(symbol, entities.OrderSideBuy, orderQuantity)
	buyResult, err := h.exchangeService.PlaceOrder(ctx, buyOrder)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É: %w", err)
	}

	if !buyResult.Success {
		return fmt.Errorf("–Ω–µ—É–¥–∞—á–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É: %s", buyResult.Error)
	}

	// 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É
	buyOrderStatus, err := h.exchangeService.GetOrderStatus(ctx, buyResult.OrderID, symbol)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É: %w", err)
	}

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ –∫—É–ø–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
	actualQuantity := buyOrderStatus.FilledQty
	if actualQuantity <= 0 {
		return fmt.Errorf("–æ—Ä–¥–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É –Ω–µ –±—ã–ª –∏—Å–ø–æ–ª–Ω–µ–Ω –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω –Ω–∞ 0")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —á–∞—Å—Ç–∏—á–Ω–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ
	fillRatio := actualQuantity / orderQuantity
	if fillRatio < 0.95 { // –ï—Å–ª–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–æ –º–µ–Ω–µ–µ 95%
		logger.LogWithTime("‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–û–ï –ò–°–ü–û–õ–ù–ï–ù–ò–ï: –∫—É–ø–ª–µ–Ω–æ %.4f %s –∏–∑ %.4f (%.1f%%)",
			actualQuantity, pair.ToBybitFormat(), orderQuantity, fillRatio*100)
		logger.LogWithTime("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏, –±–æ–ª—å—à–æ–π —Å–ø—Ä–µ–¥, –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å")
	} else {
		logger.LogWithTime("‚úÖ –ü–æ–ª–Ω–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ: –∫—É–ø–ª–µ–Ω–æ %.4f %s –∏–∑ %.4f (%.1f%%)",
			actualQuantity, pair.ToBybitFormat(), orderQuantity, fillRatio*100)
	}

	// 4. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—É —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
	takeProfitPrice := trade.CalculateTakeProfitPrice(h.config.ProfitRatio)
	logger.LogWithTime("üéØ –õ–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É: %.4f %s –ø–æ —Ü–µ–Ω–µ %.4f (—Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç)",
		actualQuantity, pair.ToBybitFormat(), takeProfitPrice)

	// 5. –†–∞–∑–º–µ—â–∞–µ–º –ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É —Å —Ä–µ—Ç—Ä–∞—è–º–∏
	sellOrder := entities.NewLimitOrder(symbol, entities.OrderSideSell, actualQuantity, takeProfitPrice)

	var sellResult *entities.OrderResult
	maxRetries := h.config.RetryAttempts
	retryDelay := time.Duration(h.config.RetryDelay) * time.Second

	for attempt := 1; attempt <= maxRetries; attempt++ {
		logger.LogWithTime("üì§ –ü–æ–ø—ã—Ç–∫–∞ %d/%d —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É", attempt, maxRetries)

		sellResult, err = h.exchangeService.PlaceOrder(ctx, sellOrder)
		if err == nil && sellResult.Success {
			logger.LogWithTime("‚úÖ –û—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω —Å –ø–æ–ø—ã—Ç–∫–∏ %d", attempt)
			break
		}

		if attempt < maxRetries {
			logger.LogWithTime("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ %d –Ω–µ—É–¥–∞—á–Ω–∞, –∂–¥–µ–º %v –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º: %v",
				attempt, retryDelay, err)
			time.Sleep(retryDelay)
		} else {
			if err != nil {
				return fmt.Errorf("–æ—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –ø–æ—Å–ª–µ %d –ø–æ–ø—ã—Ç–æ–∫: %w", maxRetries, err)
			}
			return fmt.Errorf("–Ω–µ—É–¥–∞—á–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –ø–æ—Å–ª–µ %d –ø–æ–ø—ã—Ç–æ–∫: %s", maxRetries, sellResult.Error)
		}
	}

	// 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏–∏
	now := time.Now()
	hedgedTrade := &entities.HedgedTrade{
		FreqtradeTradeID: trade.ID,
		Pair:             trade.Pair,
		HedgeTime:        now,
		BybitOrderID:     sellResult.OrderID,

		// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å—Ö–æ–¥–Ω–æ–π —Å–¥–µ–ª–∫–µ Freqtrade
		FreqtradeOpenPrice:   trade.OpenRate,
		FreqtradeAmount:      trade.Amount,
		FreqtradeProfitRatio: trade.ProfitRatio,

		// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ö–µ–¥–∂–∏—Ä—É—é—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
		HedgeOpenPrice:       trade.CurrentRate,
		HedgeAmount:          actualQuantity,
		HedgeTakeProfitPrice: takeProfitPrice,

		// –°—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞
		OrderStatus:     entities.OrderStatusPending,
		LastStatusCheck: &now,
		ClosePrice:      nil,
		CloseTime:       nil,
	}

	if err := h.hedgeRepo.SaveHedgedTrade(ctx, hedgedTrade); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–¥–µ–ª–∫–∏: %w", err)
	}

	return nil
}
