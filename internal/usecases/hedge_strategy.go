package usecases

import (
	"context"
	"fmt"
	"math"
	"time"
	"trade-hedge/internal/domain/entities"
	"trade-hedge/internal/domain/errors"
	"trade-hedge/internal/domain/repositories"
	"trade-hedge/internal/domain/services"
	"trade-hedge/internal/domain/valueobjects"
	"trade-hedge/internal/pkg/logger"
)

// HedgeStrategyConfig –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è
type HedgeStrategyConfig struct {
	PositionAmount float64 // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞ –ø–æ–∑–∏—Ü–∏–∏ –≤ –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç–µ
	MaxLossPercent float64
	ProfitRatio    float64
	BaseCurrency   string // –ë–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, USDT)
	RetryAttempts  int    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞
	RetryDelay     int    // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
}

// HedgeStrategyUseCase —Ä–µ–∞–ª–∏–∑—É–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è —É–±—ã—Ç–∫–æ–≤
type HedgeStrategyUseCase struct {
	tradeService    services.TradeService
	hedgeRepo       repositories.HedgeRepository
	exchangeService services.ExchangeService
	config          *HedgeStrategyConfig
}

// NewHedgeStrategyUseCase —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä use case
func NewHedgeStrategyUseCase(
	tradeService services.TradeService,
	hedgeRepo repositories.HedgeRepository,
	exchangeService services.ExchangeService,
	config *HedgeStrategyConfig,
) *HedgeStrategyUseCase {

	return &HedgeStrategyUseCase{
		tradeService:    tradeService,
		hedgeRepo:       hedgeRepo,
		exchangeService: exchangeService,
		config:          config,
	}
}

// GetExchangeService –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∏—Ä–∂–µ–π
func (h *HedgeStrategyUseCase) GetExchangeService() services.ExchangeService {
	return h.exchangeService
}

// ExecuteHedgeStrategy –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è
func (h *HedgeStrategyUseCase) ExecuteHedgeStrategy(ctx context.Context) error {
	// 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏
	trades, err := h.tradeService.GetActiveTrades(ctx)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: %w", err)
	}

	// 2. –§–∏–ª—å—Ç—Ä—É–µ–º —É–∂–µ —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏
	unhedgedTrades, err := h.filterUnhedgedTrades(ctx, trades)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: %w", err)
	}

	if len(unhedgedTrades) == 0 {
		return errors.NewNoTradesError()
	}

	// 3. –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–¥–µ–ª–∫–∏ –ø–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ—Å–∞–¥–∫–µ (–æ—Ç –±–æ–ª—å—à–µ–π –∫ –º–µ–Ω—å—à–µ–π)
	entities.SortTradesByDrawdown(unhedgedTrades)
	logger.LogWithTime("üìä –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª–∏ %d —Å–¥–µ–ª–æ–∫ –ø–æ –ø—Ä–æ—Å–∞–¥–∫–µ (–æ—Ç –±–æ–ª—å—à–µ–π –∫ –º–µ–Ω—å—à–µ–π)", len(unhedgedTrades))

	// –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Å–¥–µ–ª–æ–∫
	logger.LogWithTime("üìã –î–µ—Ç–∞–ª–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Å–¥–µ–ª–æ–∫:")
	for i, trade := range unhedgedTrades {
		drawdownPercent := trade.ProfitRatio * -100
		logger.LogWithTime("   %d. %s: –ø—Ä–æ—Å–∞–¥–∫–∞ %.2f%%", i+1, trade.Pair, drawdownPercent)
	}

	// 4. –ù–∞—Ö–æ–¥–∏–º –∏ –ø—ã—Ç–∞–µ–º—Å—è —Ö–µ–¥–∂–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Å–¥–µ–ª–∫–∏
	return h.findAndHedgeTrade(ctx, unhedgedTrades)
}

// filterUnhedgedTrades —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç —Å–¥–µ–ª–∫–∏, –∏—Å–∫–ª—é—á–∞—è —É–∂–µ —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
func (h *HedgeStrategyUseCase) filterUnhedgedTrades(ctx context.Context, trades []*entities.Trade) ([]*entities.Trade, error) {
	var unhedged []*entities.Trade

	for _, trade := range trades {
		isHedged, err := h.hedgeRepo.IsTradeHedged(ctx, trade.ID)
		if err != nil {
			return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Å–¥–µ–ª–∫–∏ %d: %w", trade.ID, err)
		}

		if !isHedged {
			unhedged = append(unhedged, trade)
		}
	}

	return unhedged, nil
}

// findAndHedgeTrade –Ω–∞—Ö–æ–¥–∏—Ç –∏ –ø—ã—Ç–∞–µ—Ç—Å—è —Ö–µ–¥–∂–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â—É—é —Å–¥–µ–ª–∫—É
func (h *HedgeStrategyUseCase) findAndHedgeTrade(ctx context.Context, trades []*entities.Trade) error {
	var lastError error
	var triedPairs []string

	logger.LogWithTime("üéØ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ —Å–¥–µ–ª–æ–∫ –¥–ª—è —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è (–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –ø—Ä–æ—Å–∞–¥–∫–µ)")

	// –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é —Å–¥–µ–ª–∫—É –¥–ª—è —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è
	for i, trade := range trades {
		drawdownPercent := trade.ProfitRatio * -100 // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã

		if !trade.ShouldBeHedged(h.config.MaxLossPercent) {
			logger.LogWithTime("‚è≠Ô∏è [%d/%d] –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—É %s (–ø—Ä–æ—Å–∞–¥–∫–∞: %.2f%% < –ø–æ—Ä–æ–≥ %.2f%%)",
				i+1, len(trades), trade.Pair, drawdownPercent, h.config.MaxLossPercent)
			continue
		}

		pair := valueobjects.NewTradingPair(trade.Pair)
		triedPairs = append(triedPairs, pair.String())

		// –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ—Å–∞–¥–∫—É –¥–ª—è –∫–∞–∂–¥–æ–π —Å–¥–µ–ª–∫–∏
		logger.LogWithTime("üîç [%d/%d] –ü—Ä–æ–±—É–µ–º —Ö–µ–¥–∂–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä—É %s (–ø—Ä–æ—Å–∞–¥–∫–∞: %.2f%%)...",
			i+1, len(trades), pair.String(), drawdownPercent)

		// –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏–µ
		err := h.hedgeTrade(ctx, trade)
		if err == nil {
			// –£—Å–ø–µ—à–Ω–æ —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–ª–∏
			logger.LogWithTime("‚úÖ –£—Å–ø–µ—à–Ω–æ —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–ª–∏ –ø–∞—Ä—É %s", pair.String())
			return nil
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
		if strategyErr, ok := err.(*errors.StrategyError); ok {
			if strategyErr.Type == errors.ErrorTypeInsufficientBalanceForMinLimit {
				// –≠—Ç–æ –æ–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ - –ø–∞—Ä–∞ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º—É –ª–∏–º–∏—Ç—É
				logger.LogWithTime("‚ö†Ô∏è –ü–∞—Ä–∞ %s –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º—É –ª–∏–º–∏—Ç—É, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â—É—é...", pair.String())
				lastError = err
				continue // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏—Å–∫–∞—Ç—å –¥—Ä—É–≥–∏–µ –ø–∞—Ä—ã
			}
		}

		// –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ö
		logger.LogWithTime("‚ùå –û—à–∏–±–∫–∞ —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä—ã %s: %v", pair.String(), err)
		return err
	}

	// –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ —Å—é–¥–∞, –∑–Ω–∞—á–∏—Ç –≤—Å–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–∞—Ä—ã –Ω–µ —É–¥–∞–ª–æ—Å—å —Ö–µ–¥–∂–∏—Ä–æ–≤–∞—Ç—å
	if lastError != nil {
		logger.LogWithTime("‚ö†Ô∏è –í—Å–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–∞—Ä—ã (%v) –Ω–µ —É–¥–∞–ª–æ—Å—å —Ö–µ–¥–∂–∏—Ä–æ–≤–∞—Ç—å", triedPairs)
		return lastError
	}

	// –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–¥–µ–ª–æ–∫ –¥–ª—è —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è
	logger.LogWithTime("‚ÑπÔ∏è –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ %d —Å–¥–µ–ª–æ–∫, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–ª—è —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", len(trades))
	return errors.NewNoLossyTradesError(h.config.MaxLossPercent)
}

// hedgeTrade –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–¥–µ–ª–∫–∏
func (h *HedgeStrategyUseCase) hedgeTrade(ctx context.Context, trade *entities.Trade) error {
	pair := valueobjects.NewTradingPair(trade.Pair)
	symbol := pair.ToBybitFormat()

	// 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç—ã
	balance, err := h.exchangeService.GetBalance(ctx, h.config.BaseCurrency)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ %s: %w", h.config.BaseCurrency, err)
	}

	// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é —Å—É–º–º—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Å –∑–∞–ø–∞—Å–æ–º –Ω–∞ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ
	requiredAmount := h.config.PositionAmount * 1.01 // +1% –∑–∞–ø–∞—Å –Ω–∞ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Å—É–º–º—ã –ø–æ–∑–∏—Ü–∏–∏
	// –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—É, –ù–ï –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
	if !balance.HasSufficientBalance(requiredAmount) {
		logger.LogWithTime("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏")
		logger.LogWithTime("üí° –¢—Ä–µ–±—É–µ—Ç—Å—è: %.2f %s, –¥–æ—Å—Ç—É–ø–Ω–æ: %.2f %s",
			requiredAmount, h.config.BaseCurrency, balance.Available, h.config.BaseCurrency)
		logger.LogWithTime("üí° –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—É %s - –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—É–º–º—ã –ø–æ–∑–∏—Ü–∏–∏", pair.String())
		return errors.NewInsufficientBalanceError(requiredAmount, balance.Available, h.config.BaseCurrency)
	}

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–±–µ–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏)
	adjustedPositionAmount := h.config.PositionAmount

	// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–ª—é—Ç—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—É–º–º—É
	orderQuantity := entities.CalculateQuantityFromAmount(adjustedPositionAmount, trade.CurrentRate)

	// –ü–æ–ª—É—á–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç –æ—Ä–¥–µ—Ä–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞—Ä—ã –æ—Ç Bybit API
	instrumentInfo, err := h.exchangeService.GetInstrumentInfo(ctx, symbol)
	if err != nil {
		logger.LogWithTime("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ %s: %v", symbol, err)
		logger.LogWithTime("üí° –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 100 USDT")
		// –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
		instrumentInfo = &services.InstrumentInfo{
			MinOrderAmt: 100.0,
		}
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞
	minOrderValue := instrumentInfo.MinOrderAmt
	if minOrderValue <= 0 {
		logger.LogWithTime("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: Bybit –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç: %.2f USDT", minOrderValue)
		logger.LogWithTime("üí° –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 100 USDT")
		minOrderValue = 100.0
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–ª—é—Ç—ã
	minOrderQty := instrumentInfo.MinOrderQty
	if minOrderQty <= 0 {
		logger.LogWithTime("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: Bybit –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: %.6f", minOrderQty)
		logger.LogWithTime("üí° –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 0.001")
		minOrderQty = 0.001
	}

	// –û–∫—Ä—É–≥–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏ —Å–æ–≥–ª–∞—Å–Ω–æ basePrecision –æ—Ç Bybit
	stepSize := instrumentInfo.StepSize
	if stepSize > 0 {
		// –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ –∫—Ä–∞—Ç–Ω–æ–≥–æ stepSize
		orderQuantity = math.Round(orderQuantity/stepSize) * stepSize
		logger.LogWithTime("üîß –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–æ —à–∞–≥–∞ %.6f: %.6f ‚Üí %.6f", stepSize, entities.CalculateQuantityFromAmount(adjustedPositionAmount, trade.CurrentRate), orderQuantity)
	}

	orderValue := adjustedPositionAmount

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –æ—Ä–¥–µ—Ä–∞
	if orderValue < minOrderValue {
		logger.LogWithTime("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –°—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ä–¥–µ—Ä–∞ %.2f %s –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ %.2f %s –¥–ª—è –ø–∞—Ä—ã %s",
			orderValue, h.config.BaseCurrency, minOrderValue, h.config.BaseCurrency, pair.String())
		logger.LogWithTime("üí° –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç –ø–æ–ª—É—á–µ–Ω –æ—Ç Bybit API: %s", symbol)

		logger.LogWithTime("üí° –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—É %s - —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞", pair.String())
		return errors.NewInsufficientBalanceForMinLimitError(minOrderValue, adjustedPositionAmount, h.config.BaseCurrency)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–ª—é—Ç—ã
	if orderQuantity < minOrderQty {
		logger.LogWithTime("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–ª—é—Ç—ã %.6f %s –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ %.6f –¥–ª—è –ø–∞—Ä—ã %s",
			orderQuantity, pair.ToBybitFormat(), minOrderQty, pair.String())
		logger.LogWithTime("üí° –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–µ–Ω–æ –æ—Ç Bybit API: %s", symbol)

		logger.LogWithTime("üí° –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—É %s - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞", pair.String())
		return errors.NewInsufficientBalanceForMinLimitError(minOrderValue, adjustedPositionAmount, h.config.BaseCurrency)
	}

	logger.LogWithTime("‚úÖ –°—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ä–¥–µ—Ä–∞ %.2f %s —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º—É –ª–∏–º–∏—Ç—É %.2f %s",
		orderValue, h.config.BaseCurrency, minOrderValue, h.config.BaseCurrency)
	logger.LogWithTime("‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–ª—é—Ç—ã %.6f %s —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º—É –ª–∏–º–∏—Ç—É %.6f",
		orderQuantity, pair.ToBybitFormat(), minOrderQty)
	logger.LogWithTime("üí° –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ª–∏–º–∏—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã –æ—Ç Bybit API: %s", symbol)

	logger.LogPlain("üí∞ –ë–∞–ª–∞–Ω—Å %s: –¥–æ—Å—Ç—É–ø–Ω–æ %.4f, —Ç—Ä–µ–±—É–µ—Ç—Å—è %.4f\n",
		h.config.BaseCurrency, balance.Available, requiredAmount)
	logger.LogPlain("üìä –ò—Å—Ö–æ–¥–Ω–∞—è —Å–¥–µ–ª–∫–∞ Freqtrade: %.6f %s –ø–æ —Ü–µ–Ω–µ %.4f (—É–±—ã—Ç–æ–∫ %.2f%%)\n",
		trade.Amount, pair.String(), trade.OpenRate, trade.ProfitRatio*100)
	logger.LogPlain("üõí –•–µ–¥–∂–∏—Ä—É—é—â–∞—è –ø–æ–∫—É–ø–∫–∞: %.6f %s –Ω–∞ —Å—É–º–º—É %.2f %s –ø–æ —Ü–µ–Ω–µ %.4f\n",
		orderQuantity, pair.ToBybitFormat(), adjustedPositionAmount, h.config.BaseCurrency, trade.CurrentRate)

	// 2. –†–∞–∑–º–µ—â–∞–µ–º –ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É —Å –Ω–µ–±–æ–ª—å—à–∏–º –∑–∞–ø–∞—Å–æ–º –ø–æ —Ü–µ–Ω–µ
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä –≤–º–µ—Å—Ç–æ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –Ω–∞–¥ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –ª–∏–º–∏—Ç–∞–º–∏
	limitPrice := trade.CurrentRate * 1.001 // +0.1% –∑–∞–ø–∞—Å –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è

	// –†–∞—Å—á–µ—Ç —Ü–µ–Ω—ã –¥–ª—è –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞

	// –û–∫—Ä—É–≥–ª—è–µ–º —Ü–µ–Ω—É –¥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —à–∞–≥–∞ —Å–æ–≥–ª–∞—Å–Ω–æ tickSize –æ—Ç Bybit
	tickSize := instrumentInfo.TickSize
	if tickSize > 0 {
		// –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ –∫—Ä–∞—Ç–Ω–æ–≥–æ tickSize
		limitPrice = math.Round(limitPrice/tickSize) * tickSize
		logger.LogWithTime("üîß –¶–µ–Ω–∞ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞ –¥–æ —à–∞–≥–∞ %.8f: %.8f ‚Üí %.8f", tickSize, trade.CurrentRate*1.001, limitPrice)
	}

	// –û–±—ä—è–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –æ—Ä–¥–µ—Ä–∞
	var buyOrder *entities.Order

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ü–µ–Ω–∞ –Ω–µ —Å—Ç–∞–ª–∞ –Ω—É–ª–µ–≤–æ–π –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–π –ø–æ—Å–ª–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
	// –î–ª—è –æ—á–µ–Ω—å –¥–µ—à–µ–≤—ã—Ö –∞–∫—Ç–∏–≤–æ–≤ (—Ü–µ–Ω–∞ < 0.0001) –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä —Å —Ç–µ–∫—É—â–µ–π —Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω–æ–π
	if limitPrice <= 0 || limitPrice < 0.0001 {
		logger.LogWithTime("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –¶–µ–Ω–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∞—è (%.8f), –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä —Å —Ç–µ–∫—É—â–µ–π —Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω–æ–π", limitPrice)
		// –î–ª—è –æ—á–µ–Ω—å –¥–µ—à–µ–≤—ã—Ö –∞–∫—Ç–∏–≤–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é —Ä—ã–Ω–æ—á–Ω—É—é —Ü–µ–Ω—É —Å –Ω–µ–±–æ–ª—å—à–∏–º –∑–∞–ø–∞—Å–æ–º
		marketPrice := trade.CurrentRate * 1.001 // +0.1% –∑–∞–ø–∞—Å –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
		buyOrder = entities.NewLimitOrder(symbol, entities.OrderSideBuy, orderQuantity, marketPrice)
		logger.LogWithTime("üéØ –õ–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É: %.6f %s –ø–æ —Ü–µ–Ω–µ %.8f (—Ç–µ–∫—É—â–∞—è —Ä—ã–Ω–æ—á–Ω–∞—è +0.1%%)", orderQuantity, pair.ToBybitFormat(), marketPrice)
	} else {
		buyOrder = entities.NewLimitOrder(symbol, entities.OrderSideBuy, orderQuantity, limitPrice)
		logger.LogWithTime("üéØ –õ–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É: %.6f %s –ø–æ —Ü–µ–Ω–µ %.8f (—Å –∑–∞–ø–∞—Å–æ–º +0.1%%)",
			orderQuantity, pair.ToBybitFormat(), limitPrice)
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—ã–µ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
	if symbol == "" {
		return fmt.Errorf("—Å–∏–º–≤–æ–ª –æ—Ä–¥–µ—Ä–∞ –ø—É—Å—Ç–æ–π")
	}
	if buyOrder.Quantity <= 0 {
		return fmt.Errorf("–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ä–¥–µ—Ä–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0: %.6f", buyOrder.Quantity)
	}
	// –î–ª—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ —Ü–µ–Ω–∞ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è (–æ–Ω–∞ –≤—Å–µ–≥–¥–∞ 0)
	if buyOrder.Type == entities.OrderTypeLimit && buyOrder.Price <= 0 {
		return fmt.Errorf("—Ü–µ–Ω–∞ –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0: %.4f", buyOrder.Price)
	}

	// –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É

	buyResult, err := h.exchangeService.PlaceOrder(ctx, buyOrder)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É: %w", err)
	}

	if !buyResult.Success {
		return fmt.Errorf("–Ω–µ—É–¥–∞—á–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É: %s", buyResult.Error)
	}

	// 3. –û–∂–∏–¥–∞–µ–º –ø–æ–ª–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
	logger.LogWithTime("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É...")

	var buyOrderStatus *services.OrderStatusInfo
	maxWaitAttempts := 30 // –ú–∞–∫—Å–∏–º—É–º 30 –ø–æ–ø—ã—Ç–æ–∫ (30 —Å–µ–∫—É–Ω–¥)
	waitDelay := time.Second

	for attempt := 1; attempt <= maxWaitAttempts; attempt++ {
		time.Sleep(waitDelay)

		buyOrderStatus, err = h.exchangeService.GetOrderStatus(ctx, buyResult.OrderID, symbol)
		if err != nil {
			logger.LogWithTime("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ %d/%d –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ—Ä–¥–µ—Ä–∞: %v", attempt, maxWaitAttempts, err)
			continue
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª–Ω–µ–Ω –ª–∏ –æ—Ä–¥–µ—Ä –ø–æ–ª–Ω–æ—Å—Ç—å—é
		if buyOrderStatus.Status == entities.OrderStatusFilled {
			logger.LogWithTime("‚úÖ –û—Ä–¥–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø–æ–ª–Ω–µ–Ω!")
			break
		} else if buyOrderStatus.Status == entities.OrderStatusPartiallyFilled {
			logger.LogWithTime("‚è≥ –ß–∞—Å—Ç–∏—á–Ω–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ: %v –∏–∑ %v", buyOrderStatus.FilledQty, orderQuantity)
			// –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∂–¥–∞—Ç—å –ø–æ–ª–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
		} else if buyOrderStatus.Status.IsCompleted() && buyOrderStatus.Status != entities.OrderStatusFilled {
			return fmt.Errorf("–æ—Ä–¥–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω –Ω–µ—É—Å–ø–µ—à–Ω–æ: %s", buyOrderStatus.Status)
		}

		if attempt == maxWaitAttempts {
			return fmt.Errorf("–ø—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É (30 —Å–µ–∫—É–Ω–¥)")
		}
	}

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ –∫—É–ø–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
	actualQuantity := buyOrderStatus.FilledQty
	if actualQuantity <= 0 {
		return fmt.Errorf("–æ—Ä–¥–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É –Ω–µ –±—ã–ª –∏—Å–ø–æ–ª–Ω–µ–Ω –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω –Ω–∞ 0")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —á–∞—Å—Ç–∏—á–Ω–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ
	fillRatio := actualQuantity / orderQuantity
	if fillRatio < 0.95 { // –ï—Å–ª–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–æ –º–µ–Ω–µ–µ 95%
		logger.LogWithTime("‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–û–ï –ò–°–ü–û–õ–ù–ï–ù–ò–ï: –∫—É–ø–ª–µ–Ω–æ %.4f %s –∏–∑ %.4f (%.1f%%)",
			actualQuantity, pair.ToBybitFormat(), orderQuantity, fillRatio*100)
		logger.LogWithTime("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏, –±–æ–ª—å—à–æ–π —Å–ø—Ä–µ–¥, –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å")
	} else {
		logger.LogWithTime("‚úÖ –ü–æ–ª–Ω–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ: –∫—É–ø–ª–µ–Ω–æ %.4f %s –∏–∑ %.4f (%.1f%%)",
			actualQuantity, pair.ToBybitFormat(), orderQuantity, fillRatio*100)
	}

	// 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å XRP –ø–µ—Ä–µ–¥ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ–º –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
	logger.LogWithTime("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ %s –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É...", pair.BaseCurrency())

	// –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç—ã —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, XRP –¥–ª—è XRP/USDT)
	baseCurrencyBalance, err := h.exchangeService.GetBalance(ctx, pair.BaseCurrency())
	if err != nil {
		logger.LogWithTime("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å %s: %v", pair.BaseCurrency(), err)
		logger.LogWithTime("üí° –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ –∫—É–ø–ª–µ–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º")
	} else {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ XRP –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
		if baseCurrencyBalance.Available < actualQuantity {
			logger.LogWithTime("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ %s –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏: –¥–æ—Å—Ç—É–ø–Ω–æ %.4f, —Ç—Ä–µ–±—É–µ—Ç—Å—è %.4f",
				pair.BaseCurrency(), baseCurrencyBalance.Available, actualQuantity)
			logger.LogWithTime("üí° –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ–µ")
			actualQuantity = baseCurrencyBalance.Available

			if actualQuantity <= 0 {
				return fmt.Errorf("–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ %s –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É", pair.BaseCurrency())
			}
		} else {
			logger.LogWithTime("‚úÖ –ë–∞–ª–∞–Ω—Å %s –¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω: –¥–æ—Å—Ç—É–ø–Ω–æ %.4f, —Ç—Ä–µ–±—É–µ—Ç—Å—è %.4f",
				pair.BaseCurrency(), baseCurrencyBalance.Available, actualQuantity)
		}
	}

	// 5. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—É —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
	takeProfitPrice := trade.CalculateTakeProfitPrice(h.config.ProfitRatio)

	logger.LogWithTime("üîç –†–∞—Å—á–µ—Ç —Ü–µ–Ω—ã —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞:")
	logger.LogWithTime("   –ò—Å—Ö–æ–¥–Ω–∞—è —Ü–µ–Ω–∞: %.8f", trade.CurrentRate)
	logger.LogWithTime("   –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø—Ä–∏–±—ã–ª–∏: %.4f", h.config.ProfitRatio)
	logger.LogWithTime("   –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞: %.8f", takeProfitPrice)

	// –û–∫—Ä—É–≥–ª—è–µ–º —Ü–µ–Ω—É —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞ –¥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —à–∞–≥–∞ —Å–æ–≥–ª–∞—Å–Ω–æ tickSize –æ—Ç Bybit
	if tickSize > 0 {
		// –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ –∫—Ä–∞—Ç–Ω–æ–≥–æ tickSize
		takeProfitPrice = math.Round(takeProfitPrice/tickSize) * tickSize
		logger.LogWithTime("üîß –¶–µ–Ω–∞ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞ –¥–æ —à–∞–≥–∞ %.8f: %.8f ‚Üí %.8f", tickSize, trade.CalculateTakeProfitPrice(h.config.ProfitRatio), takeProfitPrice)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ü–µ–Ω–∞ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞ –Ω–µ —Å—Ç–∞–ª–∞ –Ω—É–ª–µ–≤–æ–π
	if takeProfitPrice <= 0 {
		logger.LogWithTime("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –¶–µ–Ω–∞ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞ —Å—Ç–∞–ª–∞ –Ω—É–ª–µ–≤–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –≤—ã—à–µ —Ç–µ–∫—É—â–µ–π")
		// –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –≤—ã—à–µ —Ç–µ–∫—É—â–µ–π –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –ø—Ä–∏–±—ã–ª–∏
		takeProfitPrice = trade.CurrentRate * 1.001 // +0.1% –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å
		logger.LogWithTime("üîß –¶–µ–Ω–∞ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –ø—Ä–∏–±—ã–ª—å: %.8f", takeProfitPrice)
	}

	logger.LogWithTime("üéØ –õ–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É: %.4f %s –ø–æ —Ü–µ–Ω–µ %.8f (—Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç)",
		actualQuantity, pair.ToBybitFormat(), takeProfitPrice)

	// 6. –†–∞–∑–º–µ—â–∞–µ–º –ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É —Å —Ä–µ—Ç—Ä–∞—è–º–∏
	sellOrder := entities.NewLimitOrder(symbol, entities.OrderSideSell, actualQuantity, takeProfitPrice)

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—ã–µ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
	if sellOrder.Quantity <= 0 {
		return fmt.Errorf("–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0: %.6f", sellOrder.Quantity)
	}
	if sellOrder.Price <= 0 {
		return fmt.Errorf("—Ü–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0: %.8f", sellOrder.Price)
	}

	var sellResult *entities.OrderResult
	maxRetries := h.config.RetryAttempts
	retryDelay := 2 * time.Second

	for attempt := 1; attempt <= maxRetries; attempt++ {
		logger.LogWithTime("üì§ –ü–æ–ø—ã—Ç–∫–∞ %d/%d —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É", attempt, maxRetries)

		sellResult, err = h.exchangeService.PlaceOrder(ctx, sellOrder)
		if err != nil {
			logger.LogWithTime("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ %d –Ω–µ—É–¥–∞—á–Ω–∞: %v", attempt, err)
			if attempt < maxRetries {
				logger.LogWithTime("‚è≥ –ñ–¥–µ–º %v –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º...", retryDelay)
				time.Sleep(retryDelay)
				continue
			}
			return fmt.Errorf("–Ω–µ—É–¥–∞—á–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –ø–æ—Å–ª–µ %d –ø–æ–ø—ã—Ç–æ–∫: %w", maxRetries, err)
		}

		if sellResult.Success {
			logger.LogWithTime("‚úÖ –û—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω —Å –ø–æ–ø—ã—Ç–∫–∏ %d", attempt)
			break
		} else {
			logger.LogWithTime("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ %d –Ω–µ—É–¥–∞—á–Ω–∞: %s", attempt, sellResult.Error)
			if attempt < maxRetries {
				logger.LogWithTime("‚è≥ –ñ–¥–µ–º %v –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º...", retryDelay)
				time.Sleep(retryDelay)
				continue
			}
			return fmt.Errorf("–Ω–µ—É–¥–∞—á–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –ø–æ—Å–ª–µ %d –ø–æ–ø—ã—Ç–æ–∫: %s", maxRetries, sellResult.Error)
		}
	}

	// 7. –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏–∏
	now := time.Now()
	hedgedTrade := &entities.HedgedTrade{
		FreqtradeTradeID: trade.ID,
		Pair:             trade.Pair,
		HedgeTime:        now,
		BybitOrderID:     sellResult.OrderID,

		// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å—Ö–æ–¥–Ω–æ–π —Å–¥–µ–ª–∫–µ Freqtrade
		FreqtradeOpenPrice:   trade.OpenRate,
		FreqtradeAmount:      trade.Amount,
		FreqtradeProfitRatio: trade.ProfitRatio,

		// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ö–µ–¥–∂–∏—Ä—É—é—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
		HedgeOpenPrice:       trade.CurrentRate,
		HedgeAmount:          actualQuantity,
		HedgeTakeProfitPrice: takeProfitPrice,

		// –°—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞
		OrderStatus:     entities.OrderStatusPending,
		LastStatusCheck: &now,
		ClosePrice:      nil,
		CloseTime:       nil,
	}

	if err := h.hedgeRepo.SaveHedgedTrade(ctx, hedgedTrade); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–¥–µ–ª–∫–∏: %w", err)
	}

	return nil
}
