package clients

import (
	"context"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"trade-hedge/internal/domain/entities"
	"trade-hedge/internal/infrastructure/config"
	"trade-hedge/internal/pkg/logger"
)

// FreqtradeClient –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Freqtrade API
type FreqtradeClient struct {
	config *config.FreqtradeConfig
	client *http.Client
}

// FreqtradeTradeResponse –æ—Ç–≤–µ—Ç –æ—Ç Freqtrade API
type FreqtradeTradeResponse struct {
	TradeID     int     `json:"trade_id"`
	Pair        string  `json:"pair"`
	IsOpen      bool    `json:"is_open"`
	ProfitRatio float64 `json:"profit_ratio"`
	CurrentRate float64 `json:"current_rate"`
	OpenRate    float64 `json:"open_rate"`
	Amount      float64 `json:"amount"`
}

// NewFreqtradeClient —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç Freqtrade
func NewFreqtradeClient(config *config.FreqtradeConfig) *FreqtradeClient {
	return &FreqtradeClient{
		config: config,
		client: &http.Client{},
	}
}

// GetActiveTrades –ø–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –∏–∑ Freqtrade
func (f *FreqtradeClient) GetActiveTrades(ctx context.Context) ([]*entities.Trade, error) {
	req, err := http.NewRequestWithContext(ctx, "GET", f.config.APIURL, nil)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: %w", err)
	}

	req.SetBasicAuth(f.config.Username, f.config.Password)
	req.Header.Add("accept", "application/json")

	resp, err := f.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("–Ω–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∫–æ–¥: %d", resp.StatusCode)
	}

	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: %w", err)
	}

	// –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
	logger.LogWithTime("üîç –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Freqtrade API (%d –±–∞–π—Ç)", len(body))

	// –ü–∞—Ä—Å–∏–º –∫–∞–∫ –ø—Ä—è–º–æ–π –º–∞—Å—Å–∏–≤ (endpoint /status)
	var apiTrades []FreqtradeTradeResponse
	if err := json.Unmarshal(body, &apiTrades); err == nil {
		logger.LogWithTime("‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–¥–µ–ª–æ–∫: %d", len(apiTrades))
		return f.convertTradesToEntities(apiTrades), nil
	}

	// –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ –æ–¥–∏–Ω–æ—á–Ω—ã–π –æ–±—ä–µ–∫—Ç
	var singleTrade FreqtradeTradeResponse
	if err := json.Unmarshal(body, &singleTrade); err == nil {
		logger.LogWithTime("‚úÖ –ù–∞–π–¥–µ–Ω–∞ 1 —Å–¥–µ–ª–∫–∞ –∫–∞–∫ –æ–¥–∏–Ω–æ—á–Ω—ã–π –æ–±—ä–µ–∫—Ç")
		return f.convertTradesToEntities([]FreqtradeTradeResponse{singleTrade}), nil
	}

	return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç–≤–µ—Ç–∞ Freqtrade: %w", err)
}

// convertTradesToEntities –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç API –æ—Ç–≤–µ—Ç—ã –≤ –¥–æ–º–µ–Ω–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏
func (f *FreqtradeClient) convertTradesToEntities(apiTrades []FreqtradeTradeResponse) []*entities.Trade {
	trades := make([]*entities.Trade, 0, len(apiTrades))
	for _, apiTrade := range apiTrades {
		if apiTrade.IsOpen { // –¢–æ–ª—å–∫–æ –æ—Ç–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏
			trade := &entities.Trade{
				ID:          apiTrade.TradeID,
				Pair:        apiTrade.Pair,
				IsOpen:      apiTrade.IsOpen,
				ProfitRatio: apiTrade.ProfitRatio,
				CurrentRate: apiTrade.CurrentRate,
				OpenRate:    apiTrade.OpenRate,
				Amount:      apiTrade.Amount,
			}
			trades = append(trades, trade)
		}
	}
	return trades
}
