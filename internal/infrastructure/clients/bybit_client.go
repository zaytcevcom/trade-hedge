package clients

import (
	"bytes"
	"context"
	"crypto/hmac"
	"crypto/sha256"
	"encoding/hex"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"strconv"
	"strings"
	"time"
	"trade-hedge/internal/domain/entities"
	"trade-hedge/internal/domain/services"
	"trade-hedge/internal/infrastructure/config"
)

// BybitClient –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Bybit API
type BybitClient struct {
	config *config.BybitConfig
	client *http.Client
}

// BybitOrderResponse –æ—Ç–≤–µ—Ç –æ—Ç Bybit API
type BybitOrderResponse struct {
	RetCode int    `json:"retCode"`
	RetMsg  string `json:"retMsg"`
	Result  struct {
		OrderID string `json:"orderId"`
	} `json:"result"`
}

// BybitErrorResponse –æ—à–∏–±–∫–∞ –æ—Ç Bybit API
type BybitErrorResponse struct {
	RetCode int    `json:"retCode"`
	RetMsg  string `json:"retMsg"`
}

// BybitBalanceResponse –æ—Ç–≤–µ—Ç –æ—Ç Bybit UNIFIED API —Å –±–∞–ª–∞–Ω—Å–æ–º
type BybitBalanceResponse struct {
	RetCode int    `json:"retCode"`
	RetMsg  string `json:"retMsg"`
	Result  struct {
		List []struct {
			AccountType           string `json:"accountType"`
			TotalEquity           string `json:"totalEquity"`
			TotalWalletBalance    string `json:"totalWalletBalance"`
			TotalAvailableBalance string `json:"totalAvailableBalance"`
			Coin                  []struct {
				Coin                string `json:"coin"`
				WalletBalance       string `json:"walletBalance"`
				AvailableToWithdraw string `json:"availableToWithdraw"`
				Equity              string `json:"equity"`
				UsdValue            string `json:"usdValue"`
			} `json:"coin"`
		} `json:"list"`
	} `json:"result"`
}

// BybitOrderStatusResponse –æ—Ç–≤–µ—Ç –æ—Ç Bybit API —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –æ—Ä–¥–µ—Ä–∞
type BybitOrderStatusResponse struct {
	RetCode int    `json:"retCode"`
	RetMsg  string `json:"retMsg"`
	Result  struct {
		List []struct {
			OrderID     string `json:"orderId"`
			Symbol      string `json:"symbol"`
			OrderStatus string `json:"orderStatus"`
			Side        string `json:"side"`
			OrderType   string `json:"orderType"`
			Price       string `json:"price"`
			Qty         string `json:"qty"`
			CumExecQty  string `json:"cumExecQty"`
			LeavesQty   string `json:"leavesQty"`
			AvgPrice    string `json:"avgPrice"`
			CreatedTime string `json:"createdTime"`
			UpdatedTime string `json:"updatedTime"`
		} `json:"list"`
	} `json:"result"`
}

// NewBybitClient —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç Bybit
func NewBybitClient(config *config.BybitConfig) *BybitClient {
	return &BybitClient{
		config: config,
		client: &http.Client{},
	}
}

// PlaceOrder —Ä–∞–∑–º–µ—â–∞–µ—Ç –æ—Ä–¥–µ—Ä –Ω–∞ Bybit
func (b *BybitClient) PlaceOrder(ctx context.Context, order *entities.Order) (*entities.OrderResult, error) {
	timestamp := time.Now().UnixMilli()
	recvWindow := "5000"

	params := map[string]interface{}{
		"category":    "spot", // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è V5 API
		"symbol":      order.Symbol,
		"side":        string(order.Side),
		"orderType":   string(order.Type), // –í V5 API —ç—Ç–æ orderType, –Ω–µ type
		"qty":         strconv.FormatFloat(order.Quantity, 'f', 6, 64),
		"timeInForce": "GTC",
	}

	// –î–ª—è –ª–∏–º–∏—Ç–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—É
	if order.Type == entities.OrderTypeLimit {
		params["price"] = strconv.FormatFloat(order.Price, 'f', 6, 64)
	}

	paramStr, err := json.Marshal(params)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: %w", err)
	}

	// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏
	signature := hmac.New(sha256.New, []byte(b.config.APISecret))
	signature.Write([]byte(fmt.Sprintf("%d%s%s%s", timestamp, b.config.APIKey, recvWindow, paramStr)))
	sign := hex.EncodeToString(signature.Sum(nil))

	// –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ (–±–µ–∑ category –≤ URL –¥–ª—è V5 API)
	reqBody, _ := json.Marshal(params)
	req, err := http.NewRequestWithContext(ctx, "POST", b.config.SpotURL, bytes.NewBuffer(reqBody))
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: %w", err)
	}

	req.Header.Add("X-BAPI-API-KEY", b.config.APIKey)
	req.Header.Add("X-BAPI-SIGN", sign)
	req.Header.Add("X-BAPI-SIGN-TYPE", "2")
	req.Header.Add("X-BAPI-TIMESTAMP", fmt.Sprintf("%d", timestamp))
	req.Header.Add("X-BAPI-RECV-WINDOW", recvWindow)
	req.Header.Add("Content-Type", "application/json")

	resp, err := b.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: %w", err)
	}
	defer resp.Body.Close()

	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: %w", err)
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫—É
	var errResp BybitErrorResponse
	if err := json.Unmarshal(body, &errResp); err == nil && errResp.RetCode != 0 {
		return &entities.OrderResult{
			Success: false,
			Error:   fmt.Sprintf("–æ—à–∏–±–∫–∞ Bybit: %s (–∫–æ–¥: %d)", errResp.RetMsg, errResp.RetCode),
		}, nil
	}

	// –ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
	var result BybitOrderResponse
	if err := json.Unmarshal(body, &result); err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞: %w", err)
	}

	return &entities.OrderResult{
		OrderID: result.Result.OrderID,
		Success: true,
		Error:   "",
	}, nil
}

// GetBalance –ø–æ–ª—É—á–∞–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç–µ
func (b *BybitClient) GetBalance(ctx context.Context, asset string) (*entities.Balance, error) {
	timestamp := time.Now().UnixMilli()
	recvWindow := "5000"

	// –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º UNIFIED –∞–∫–∫–∞—É–Ω—Ç)
	params := fmt.Sprintf("accountType=UNIFIED&coin=%s", asset)

	// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è GET –∑–∞–ø—Ä–æ—Å–∞
	signature := hmac.New(sha256.New, []byte(b.config.APISecret))
	signature.Write([]byte(fmt.Sprintf("%d%s%s%s", timestamp, b.config.APIKey, recvWindow, params)))
	sign := hex.EncodeToString(signature.Sum(nil))

	// –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
	url := fmt.Sprintf("%s?%s", b.config.BalanceURL, params)
	req, err := http.NewRequestWithContext(ctx, "GET", url, nil)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: %w", err)
	}

	req.Header.Add("X-BAPI-API-KEY", b.config.APIKey)
	req.Header.Add("X-BAPI-SIGN", sign)
	req.Header.Add("X-BAPI-TIMESTAMP", fmt.Sprintf("%d", timestamp))
	req.Header.Add("X-BAPI-RECV-WINDOW", recvWindow)

	resp, err := b.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: %w", err)
	}
	defer resp.Body.Close()

	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: %w", err)
	}

	// –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
	fmt.Printf("üîç Bybit Balance API –æ—Ç–≤–µ—Ç (%d –±–∞–π—Ç)\n", len(body))

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫—É
	var errResp BybitErrorResponse
	if err := json.Unmarshal(body, &errResp); err == nil && errResp.RetCode != 0 {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ Bybit: %s (–∫–æ–¥: %d)", errResp.RetMsg, errResp.RetCode)
	}

	// –ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
	var result BybitBalanceResponse
	if err := json.Unmarshal(body, &result); err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞: %w", err)
	}

	// –ü–æ–∏—Å–∫ –±–∞–ª–∞–Ω—Å–∞ –Ω—É–∂–Ω–æ–π –≤–∞–ª—é—Ç—ã –≤ UNIFIED account
	for _, account := range result.Result.List {
		for _, coinBalance := range account.Coin {
			if strings.EqualFold(coinBalance.Coin, asset) {
				walletBalance, _ := strconv.ParseFloat(coinBalance.WalletBalance, 64)
				availableBalance, _ := strconv.ParseFloat(coinBalance.AvailableToWithdraw, 64)

				// –ï—Å–ª–∏ AvailableToWithdraw –ø—É—Å—Ç–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º WalletBalance
				if coinBalance.AvailableToWithdraw == "" {
					availableBalance = walletBalance
				}

				return &entities.Balance{
					Asset:     asset,
					Available: availableBalance, // –î–æ—Å—Ç—É–ø–Ω—ã–π –¥–ª—è –≤—ã–≤–æ–¥–∞/—Ç–æ—Ä–≥–æ–≤–ª–∏
					Total:     walletBalance,    // –û–±—â–∏–π –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞
				}, nil
			}
		}
	}

	return nil, fmt.Errorf("–≤–∞–ª—é—Ç–∞ %s –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–ª–∞–Ω—Å–µ UNIFIED –∞–∫–∫–∞—É–Ω—Ç–∞", asset)
}

// GetOrderStatus –ø–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞ –ø–æ ID
func (b *BybitClient) GetOrderStatus(ctx context.Context, orderID, symbol string) (*services.OrderStatusInfo, error) {
	timestamp := time.Now().UnixMilli()
	recvWindow := "5000"

	// –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
	params := fmt.Sprintf("category=spot&orderId=%s", orderID)

	// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è GET –∑–∞–ø—Ä–æ—Å–∞
	signature := hmac.New(sha256.New, []byte(b.config.APISecret))
	signature.Write([]byte(fmt.Sprintf("%d%s%s%s", timestamp, b.config.APIKey, recvWindow, params)))
	sign := hex.EncodeToString(signature.Sum(nil))

	// –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
	url := fmt.Sprintf("%s?%s", b.config.OrderStatusURL, params)
	req, err := http.NewRequestWithContext(ctx, "GET", url, nil)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: %w", err)
	}

	req.Header.Add("X-BAPI-API-KEY", b.config.APIKey)
	req.Header.Add("X-BAPI-SIGN", sign)
	req.Header.Add("X-BAPI-TIMESTAMP", fmt.Sprintf("%d", timestamp))
	req.Header.Add("X-BAPI-RECV-WINDOW", recvWindow)

	resp, err := b.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: %w", err)
	}
	defer resp.Body.Close()

	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: %w", err)
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫—É
	var errResp BybitErrorResponse
	if err := json.Unmarshal(body, &errResp); err == nil && errResp.RetCode != 0 {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ Bybit: %s (–∫–æ–¥: %d)", errResp.RetMsg, errResp.RetCode)
	}

	// –ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
	var result BybitOrderStatusResponse
	if err := json.Unmarshal(body, &result); err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞: %w", err)
	}

	if len(result.Result.List) == 0 {
		return nil, fmt.Errorf("–æ—Ä–¥–µ—Ä %s –Ω–µ –Ω–∞–π–¥–µ–Ω", orderID)
	}

	orderData := result.Result.List[0]

	// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å Bybit –≤ –Ω–∞—à enum
	status := entities.OrderStatusFromString(orderData.OrderStatus)

	// –ü–∞—Ä—Å–∏–º —á–∏—Å–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
	filledQty, _ := strconv.ParseFloat(orderData.CumExecQty, 64)
	remainingQty, _ := strconv.ParseFloat(orderData.LeavesQty, 64)

	statusInfo := &services.OrderStatusInfo{
		OrderID:      orderData.OrderID,
		Status:       status,
		FilledQty:    filledQty,
		RemainingQty: remainingQty,
	}

	// –ï—Å–ª–∏ –æ—Ä–¥–µ—Ä –∏—Å–ø–æ–ª–Ω–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–Ω–µ –∏ –≤—Ä–µ–º–µ–Ω–∏
	if status == entities.OrderStatusFilled && orderData.AvgPrice != "" {
		avgPrice, err := strconv.ParseFloat(orderData.AvgPrice, 64)
		if err == nil {
			statusInfo.FilledPrice = &avgPrice
		}

		// –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∫ –≤—Ä–µ–º—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
		if orderData.UpdatedTime != "" {
			if updatedTimeMs, err := strconv.ParseInt(orderData.UpdatedTime, 10, 64); err == nil {
				filledTime := time.UnixMilli(updatedTimeMs)
				statusInfo.FilledTime = &filledTime
			}
		}
	}

	return statusInfo, nil
}
